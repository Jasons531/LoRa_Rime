---- callbacks Matches (73 in 40 files) ----
Abc.c (core\net\rime):	  const struct abc_callbacks *callbacks)
Abc.c (core\net\rime):  c->u = callbacks;
Adxl345.c (platform\z1\dev):  /* Invoke callbacks for the corresponding interrupts */
Adxl345.h (platform\z1\dev):  ISR is invoked and polls the accelerometer process which invokes the callbacks. */
Border-router-rdc.c (examples\ipv6\native-border-router):static struct tx_callback callbacks[MAX_CALLBACKS];
Border-router-rdc.c (examples\ipv6\native-border-router):    callback = &callbacks[sessionid];
Border-router-rdc.c (examples\ipv6\native-border-router):  callback = &callbacks[callback_pos];
Collect.h (core\net\rime):                  const struct collect_callbacks *callbacks);
Contiki-main.c (platform\cc2538dk):   * it will overwrite one of the two peripheral input callbacks. Characters
Contiki-main.c (platform\remote):   * it will overwrite one of the two peripheral input callbacks. Characters
Deluge.c (apps\deluge):/* Rime callbacks. */
Dhcpc.h (core\net\ip):/* Mandatory callbacks provided by the user. */
Elfloader-otf.h (cpu\arm\at91sam7s\loader): * This object defines methods (callbacks) for writing the segments to memory.
Example-collect.c (examples\rime):static const struct collect_callbacks callbacks = { recv };
Example-collect.c (examples\rime):  collect_open(&tc, 130, COLLECT_ROUTER, &callbacks);
Example-mesh.c (examples\rime):const static struct mesh_callbacks callbacks = {recv, sent, timedout};
Example-mesh.c (examples\rime):  mesh_open(&mesh, 132, &callbacks);
Example-polite.c (examples\rime):static const struct polite_callbacks callbacks = { recv, sent, dropped };
Example-polite.c (examples\rime):  polite_open(&c, 136, &callbacks);
Example-runicast.c (examples\rime): * Detects duplicate callbacks at receiving nodes.
Gpio.c (cpu\cc2538\dev): * buffer, Port B callbacks in [8:15] and so on
Gpio.c (cpu\cc2538\dev):/** \brief Run through all registered GPIO callbacks and invoke those
Gpio.c (cpu\cc2538\dev): * \param mask Search callbacks associated with pins specified by this mask
Gpio.c (cpu\cc2538\dev): * \param port Search callbacks associated with this port. Here, port is
Gpio.h (cpu\cc2538\dev): * \brief Type definition for callbacks invoked by the GPIO ISRs
Gpio.h (cpu\cc2538\dev): * gpio_register_callback(). These callbacks are registered on a port/pin
Ip64-dhcpc.h (core\net\ip64):/* Mandatory callbacks provided by the user. */
Ipolite.h (core\net\rime): * \param cb   A pointer to the callbacks used for this connection
Ipolite.h (core\net\rime): *             specified channel. The callbacks are called when a
Mesh.c (core\net\rime):	  const struct mesh_callbacks *callbacks)
Mesh.c (core\net\rime):  c->cb = callbacks;
Mesh.h (core\net\rime): * \brief     Mesh callbacks
Mesh.h (core\net\rime): * \param callbacks Pointer to callback structure
Mesh.h (core\net\rime):	       const struct mesh_callbacks *callbacks);
Multihop.c (core\net\rime):	const struct multihop_callbacks *callbacks)
Multihop.c (core\net\rime):  c->cb = callbacks;
Netdb-client.c (examples\antelope\netdb):static const struct mesh_callbacks callbacks = {received, sent, timedout};
Netdb-client.c (examples\antelope\netdb):  mesh_open(&mesh, NETDB_CHANNEL, &callbacks);
Netdb-server.c (examples\antelope\netdb):static const struct mesh_callbacks callbacks = {received, sent, timedout};
Netdb-server.c (examples\antelope\netdb):  mesh_open(&mesh, NETDB_CHANNEL, &callbacks);
Polite.h (core\net\rime): * \param cb   A pointer to the callbacks used for this connection
Polite.h (core\net\rime): *             specified channel. The callbacks are called when a
Radio.c (cpu\avr\radio\rf230):    /*  set callbacks for events.  Save user's rx_event, which we will */
Raven-lcd.c (platform\avr-atmega128rfa1\apps\raven-lcd-interface):  /* Get ICMP6 callbacks from uip6 stack, perform 3290p action on pings, responses, etc. */
Raven-lcd.c (platform\avr-raven\apps\raven-lcd-interface):  /* Get ICMP6 callbacks from uip6 stack, perform 3290p action on pings, responses, etc. */
Rmh.c (core\net\rime):	const struct rmh_callbacks *callbacks)
Rmh.c (core\net\rime):  c->cb = callbacks;
Route-discovery.c (core\net\rime):		     const struct route_discovery_callbacks *callbacks)
Route-discovery.c (core\net\rime):  c->cb = callbacks;
Route-discovery.h (core\net\rime):			  const struct route_discovery_callbacks *callbacks);
Rpl-icmp6.c (core\net\rpl):/* some debug callbacks useful when debugging RPL networks */
Sky-collect.c (examples\sky):static const struct collect_callbacks callbacks = { recv };
Sky-collect.c (examples\sky):  collect_open(&tc, 128, COLLECT_ROUTER, &callbacks);
Tcp-socket.h (core\net\ip): * \param ptr  A user-defined pointer that will be sent to callbacks for this socket
Test-adxl345.c (examples\z1): *         Zolertia Z1. Enables interrupts and registers callbacks for them. Then
Trickle-timer.c (core\lib):/* Local utilities and functions to be used as ctimer callbacks */
Udp-socket.h (core\net\ip): * \param ptr  An opaque pointer that will be passed to callbacks
Websense-remote.c (examples\ipv6\sky-websense):static const struct wget_callbacks callbacks = {
Websense-remote.c (examples\ipv6\sky-websense):  ret = wget_get(server, 80, command, &callbacks);
Websense-remote.c (examples\z1\ipv6\z1-websense):static const struct wget_callbacks callbacks = {
Websense-remote.c (examples\z1\ipv6\z1-websense):  ret = wget_get(server, 80, command, &callbacks);
Wget.c (examples\ipv6\sky-websense):static const struct wget_callbacks *callbacks;
Wget.c (examples\ipv6\sky-websense):  if(callbacks != NULL && callbacks->done != NULL) {
Wget.c (examples\ipv6\sky-websense):    callbacks->done(status);
Wget.c (examples\ipv6\sky-websense):    if(callbacks != NULL && callbacks->data != NULL) {
Wget.c (examples\ipv6\sky-websense):      callbacks->data(data, len);
Wget.c (examples\ipv6\sky-websense):  callbacks = c;
Wget.c (examples\z1\ipv6\z1-websense):static const struct wget_callbacks *callbacks;
Wget.c (examples\z1\ipv6\z1-websense):  if(callbacks != NULL && callbacks->done != NULL) {
Wget.c (examples\z1\ipv6\z1-websense):    callbacks->done(status);
Wget.c (examples\z1\ipv6\z1-websense):    if(callbacks != NULL && callbacks->data != NULL) {
Wget.c (examples\z1\ipv6\z1-websense):      callbacks->data(data, len);
Wget.c (examples\z1\ipv6\z1-websense):  callbacks = c;
